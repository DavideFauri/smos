<h1 .title .is-1>
  #{docPageTitle}
<h2 .subtitle .is-4>
  #{docPageDescription}

<div .content>
  #{preEscapedToMarkup docPageRendered}

  <h3> Entry

  <p>
    An entry consists of

  <ul>
    <li> A header
    <li> Contents (optionally)
    <li> Timestamps (optionally)
    <li> Properties (optionally)
    <li> Its state and state history (optionally)
    <li> Tags (optionally)
    <li> A clock logbook (optionally)

  <h3>
    Example
  <pre>
    #{example exampleEntry}

  <h3>
    Yaml Schema
  <p>
    An entry can either be only a header, in which case it can be represented as a string:
  <pre>
    &lt;header&gt;
  <p>
    Or it can have more fields, in which case it is an object:
  <pre>
    header: &lt;header&gt;
    contents: &lt;contents&gt;
    logbook: &lt;logbook&gt;
    timestamps: &lt;timestamps&gt;
    state-history: &lt;state-history&gt;
    tags: &lt;tags&gt;
    properties: &lt;properties&gt;



  <h3> Header

  <p>
    A Smos entry's header consists of a single line of text.

  <p>
    Headers contain a title-like piece of information about an entry.

  <h4>
    Yaml Schema
  <pre>
    #{headerDesc}

  <h4>
    Example
  <pre>
    #{example $ Header "Go to the gym: HITT class"}


  <h3> Contents

  <p>
    A Smos entry's contents consist of an arbitrary piece of text.

  <p>
    Contents contain details about an entry.

  <h4>
    Yaml Schema
  <pre>
    #{contentsDesc}



  <h3> Timestamps

  <p>
    A Smos entry's timestamps are a map of timestamp names to timestamps.
    Timestamps contain time-based information about an entry.
    
  <p>
    Timestamp names are arbitrary pieces of text without whitespace.
    
  <p>
    Standard timestamps are, for example:
 
  <ul>
    <li>
      <code> BEGIN
    <li>
      <code> END
    <li>
      <code> SCHEDULED
    <li>
      <code> DEADLINE
    
  <p>
    A timestamp has two possible granularities:
    
  <ul>
    <li> The day level
    <li> The moment level

  <h4>
    Example
  <pre>
    #{example $ M.singleton (TimestampName "SCHEDULED") (TimestampDay $ fromGregorian 2020 5 9)}

  <h4>
    Yaml Schema
  <pre>
    #{timestampsDesc}




  <h3> Properties

  <p>
    A Smos entry's properties are a map of property names to property values.
    Properties contain named pieces of information about an entry.
    Property names are arbitrary pieces of text without whitespace.
    Property values are arbitrary pieces of text without newlines.

  <p>
    Properties can be used to filter entries by.

  <p>
    Standard properties are, for example:

  <ul>
    <li>
      <code> timewindow
    <li>
      <code> brainpower
    <li>
      <code> client

  <h4>
    Example
  <pre>
    #{example $ M.singleton (PropertyName "project") (PropertyValue "smos")}

  <h4>
    Yaml Schema
  <pre>
    #{propertiesDesc}


  <h3> State and state history
  <p>
    A Smos entry can have a state.
    States contain information about the state of an entry.
    States are arbitrary pieces of text without whitespace.

  <p>
    The state history must appear in reverse chronological order.

  <p>
    Standard states are, for example:

  <ul>
    <li>
      <code> WAITING
    <li>
      <code> TODO
    <li>
      <code> STARTED
    <li>
      <code> READY
    <li>
      <code> NEXT
    <li>
      <code> FAILED
    <li>
      <code> DONE
    <li>
      <code> CANCELLED

  <p>
    A Smos entry also remembers its entire state history.

  <h4>
    Example
  <pre>
    #{example exampleStateHistory}

  <h4>
    Yaml Schema
  <pre>
    #{stateHistoryDesc}
 

  <h3> Tags
  <p>
    A Smos entry can have tags. Tags contain label-like information about an entry. Tags are arbitrary pieces of text without whitespace.
  <p>
    Properties can be used to filter entries by.
  <p>
    Standard tags are, for example:
  <ul>
    <li>
      <code> code
    <li>
      <code> external
    <li>
      <code> home
    <li>
      <code> online
    <li>
      <code> offline
    <li>
      <code> power
    <li>
      <code> toast

  <h4>
    Example
  <pre>
    #{example exampleTags}

  <h4>
    Yaml Schema
  <pre>
    #{tagsDesc}


  <h3> Logbook
  <p>
    Each entry can contain information about when a clock was started on it. Clocks can either be closed (have a begin and end time) or open (only a begin time).
  <p>
    Logbooks are used to generate timetables.

  <h4>
    Example
  <pre>
    #{example exampleLogbook}

  <h4>  
    Yaml Schema
  <pre>
    #{logbookDesc}

  <h3>
    Full Smos file schema reference
  <pre>
    #{smosFileDesc}
